--kalas#1330 17/10/22

return (function()local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIIIlIl = "\77\69\79\87\79\87\79\79\87\79\87\87\79\87\79\87\79\87\79\87\79\87";local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIIIlIl = "\77\69\79\87\79\87\79\79\87\79\87\87\79\87\79\87\79\87\79\87\79\87";local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIIIlIl = "\77\69\79\87\79\87\79\79\87\79\87\87\79\87\79\87\79\87\79\87\79\87";local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIllllI=47;local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlllIl=298;local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlllII=3;local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlIllI=function(a)local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';a=string.gsub(a,'[^'..b..'=]','')return a:gsub('.',function(c)if c=='='then return''end;local d,e='',b:find(c)-1;for f=6,1,-1 do d=d..(e%2^f-e%2^(f-1)>0 and'1'or'0')end;return d end):gsub('%d%d%d?%d?%d?%d?%d?%d?',function(c)if#c~=8 then return''end;local g=0;for f=1,8 do g=g+(c:sub(f,f)=='1'and 2^(8-f)or 0)end;return string.char(g)end)end;local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlllIl=45;local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlIlIl=(function()local function a(b)local c={}for d=0,255 do c[d]={}end;c[0][0]=b[1]*255;local e=1;for f=0,7 do for d=0,e-1 do for g=0,e-1 do local h=c[d][g]-b[1]*e;c[d][g+e]=h+b[2]*e;c[d+e][g]=h+b[3]*e;c[d+e][g+e]=h+b[4]*e end end;e=e*2 end;return c end;local i=a{0,1,1,0}local function j(self,k)local l,d,g=self.S,self.i,self.j;local m={}local n=string.char;for o=1,k do d=(d+1)%256;g=(g+l[d])%256;l[d],l[g]=l[g],l[d]m[o]=n(l[(l[d]+l[g])%256])end;self.i,self.j=d,g;return table.concat(m)end;local function p(self,q)local r=j(self,#q)local s={}local t=string.byte;local n=string.char;for d=1,#q do s[d]=n(i[t(q,d)][t(r,d)])end;return table.concat(s)end;local function u(self,v)local l=self.S;local g,w=0,#v;local t=string.byte;for d=0,255 do g=(g+l[d]+t(v,d%w+1))%256;l[d],l[g]=l[g],l[d]end end;function new(v)local l={}local s={S=l,i=0,j=0,generate=j,cipher=p,schedule=u}for d=0,255 do l[d]=d end;if v then s:schedule(v)end;return s end;return new end)();local fev=getfenv or function()return _ENV end;local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlIlII=(function()if not bit then local bit_=nil pcall(function()bit_=require('bit') end)bit=bit_ end local bit=bit or bit32 or(function()local a={_TYPE='module',_NAME='bit.numberlua',_VERSION='0.3.1.20120131'}local b=math.floor;local c=2^32;local d=c-1;local function e(f)local g={}local h=setmetatable({},g)function g:__index(i)local j=f(i)h[i]=j;return j end;return h end;local function k(h,l)local function m(n,o)local p,q=0,1;while n~=0 and o~=0 do local r,s=n%l,o%l;p=p+h[r][s]*q;n=(n-r)/l;o=(o-s)/l;q=q*l end;p=p+(n+o)*q;return p end;return m end;local function t(h)local u=k(h,2^1)local v=e(function(n)return e(function(o)return u(n,o)end)end)return k(v,2^(h.n or 1))end;function a.tobit(w)return w%2^32 end;a.bxor=t{[0]={[0]=0,[1]=1},[1]={[0]=1,[1]=0},n=4}local x=a.bxor;function a.bnot(n)return d-n end;local y=a.bnot;function a.band(n,o)return(n+o-x(n,o))/2 end;local z=a.band;function a.bor(n,o)return d-z(d-n,d-o)end;local A=a.bor;local B,C;function a.rshift(n,D)if D<0 then return B(n,-D)end;return b(n%2^32/2^D)end;C=a.rshift;function a.lshift(n,D)if D<0 then return C(n,-D)end;return n*2^D%2^32 end;B=a.lshift;function a.tohex(w,E)E=E or 8;local F;if E<=0 then if E==0 then return''end;F=true;E=-E end;w=z(w,16^E-1)return('%0'..E..(F and'X'or'x')):format(w)end;local G=a.tohex;function a.extract(E,H,I)I=I or 1;return z(C(E,H),2^I-1)end;local J=a.extract;function a.replace(E,j,H,I)I=I or 1;local K=2^I-1;j=z(j,K)local L=y(B(K,H))return z(E,L)+B(j,H)end;local M=a.replace;function a.bswap(w)local n=z(w,0xff)w=C(w,8)local o=z(w,0xff)w=C(w,8)local N=z(w,0xff)w=C(w,8)local O=z(w,0xff)return B(B(B(n,8)+o,8)+N,8)+O end;local P=a.bswap;function a.rrotate(w,D)D=D%32;local Q=z(w,2^D-1)return C(w,D)+B(Q,32-D)end;local R=a.rrotate;function a.lrotate(w,D)return R(w,-D)end;local S=a.lrotate;a.rol=a.lrotate;a.ror=a.rrotate;function a.arshift(w,D)local T=C(w,D)if w>=0x80000000 then T=T+B(2^D-1,32-D)end;return T end;local U=a.arshift;function a.btest(w,V)return z(w,V)~=0 end;a.bit32={}local function W(w)return(-1-w)%c end;a.bit32.bnot=W;local function X(n,o,N,...)local T;if o then n=n%c;o=o%c;T=x(n,o)if N then T=X(T,N,...)end;return T elseif n then return n%c else return 0 end end;a.bit32.bxor=X;local function Y(n,o,N,...)local T;if o then n=n%c;o=o%c;T=(n+o-x(n,o))/2;if N then T=Y(T,N,...)end;return T elseif n then return n%c else return d end end;a.bit32.band=Y;local function Z(n,o,N,...)local T;if o then n=n%c;o=o%c;T=d-z(d-n,d-o)if N then T=Z(T,N,...)end;return T elseif n then return n%c else return 0 end end;a.bit32.bor=Z;function a.bit32.btest(...)return Y(...)~=0 end;function a.bit32.lrotate(w,D)return S(w%c,D)end;function a.bit32.rrotate(w,D)return R(w%c,D)end;function a.bit32.lshift(w,D)if D>31 or D<-31 then return 0 end;return B(w%c,D)end;function a.bit32.rshift(w,D)if D>31 or D<-31 then return 0 end;return C(w%c,D)end;function a.bit32.arshift(w,D)w=w%c;if D>=0 then if D>31 then return w>=0x80000000 and d or 0 else local T=C(w,D)if w>=0x80000000 then T=T+B(2^D-1,32-D)end;return T end else return B(w,-D)end end;function a.bit32.extract(w,H,...)local I=...or 1;if H<0 or H>31 or I<0 or H+I>32 then error'out of range'end;w=w%c;return J(w,H,...)end;function a.bit32.replace(w,j,H,...)local I=...or 1;if H<0 or H>31 or I<0 or H+I>32 then error'out of range'end;w=w%c;j=j%c;return M(w,j,H,...)end;a.bit={}function a.bit.tobit(w)w=w%c;if w>=0x80000000 then w=w-c end;return w end;local _=a.bit.tobit;function a.bit.tohex(w,...)return G(w%c,...)end;function a.bit.bnot(w)return _(y(w%c))end;local function a0(n,o,N,...)if N then return a0(a0(n,o),N,...)elseif o then return _(A(n%c,o%c))else return _(n)end end;a.bit.bor=a0;local function a1(n,o,N,...)if N then return a1(a1(n,o),N,...)elseif o then return _(z(n%c,o%c))else return _(n)end end;a.bit.band=a1;local function a2(n,o,N,...)if N then return a2(a2(n,o),N,...)elseif o then return _(x(n%c,o%c))else return _(n)end end;a.bit.bxor=a2;function a.bit.lshift(w,E)return _(B(w%c,E%32))end;function a.bit.rshift(w,E)return _(C(w%c,E%32))end;function a.bit.arshift(w,E)return _(U(w%c,E%32))end;function a.bit.rol(w,E)return _(S(w%c,E%32))end;function a.bit.ror(w,E)return _(R(w%c,E%32))end;function a.bit.bswap(w)return _(P(w%c))end;return a end)()local unpack=table.unpack or unpack;local a3;local a4;local a5;local a6=50;local a7={[22]=18,[31]=8,[33]=28,[0]=3,[1]=13,[2]=23,[26]=33,[12]=1,[13]=6,[14]=10,[15]=16,[16]=20,[17]=26,[18]=30,[19]=36,[3]=0,[4]=2,[5]=4,[6]=7,[7]=9,[8]=12,[9]=14,[10]=17,[20]=19,[21]=22,[23]=24,[24]=27,[25]=29,[27]=32,[32]=34,[34]=37,[11]=5,[28]=11,[29]=15,[30]=21,[35]=25,[36]=31,[37]=35}local a8={[0]='ABC','ABx','ABC','ABC','ABC','ABx','ABC','ABx','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','AsBx','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','AsBx','AsBx','ABC','ABC','ABC','ABx','ABC'}local a9={[0]={b='OpArgR',c='OpArgN'},{b='OpArgK',c='OpArgN'},{b='OpArgU',c='OpArgU'},{b='OpArgR',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgK',c='OpArgN'},{b='OpArgR',c='OpArgK'},{b='OpArgK',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgK',c='OpArgK'},{b='OpArgU',c='OpArgU'},{b='OpArgR',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgR'},{b='OpArgR',c='OpArgN'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgR',c='OpArgU'},{b='OpArgR',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgU',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgN',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgN',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgU',c='OpArgN'}}local function aa(ab,s,e,d)local ac=0;for i=s,e,d do ac=ac+string.byte(ab,i,i)*256^(i-s)end;return ac end;local function ad(ae,af,ag,ah)local ai=(-1)^bit.rshift(ah,7)local aj=bit.rshift(ag,7)+bit.lshift(bit.band(ah,0x7F),1)local ak=ae+bit.lshift(af,8)+bit.lshift(bit.band(ag,0x7F),16)local al=1;if aj==0 then if ak==0 then return ai*0 else al=0;aj=1 end elseif aj==0x7F then if ak==0 then return ai*1/0 else return ai*0/0 end end;return ai*2^(aj-127)*(1+al/2^23)end;local function am(ae,af,ag,ah,an,ao,ap,aq)local ai=(-1)^bit.rshift(aq,7)local aj=bit.lshift(bit.band(aq,0x7F),4)+bit.rshift(ap,4)local ak=bit.band(ap,0x0F)*2^48;local al=1;ak=ak+ao*2^40+an*2^32+ah*2^24+ag*2^16+af*2^8+ae;if aj==0 then if ak==0 then return ai*0 else al=0;aj=1 end elseif aj==0x7FF then if ak==0 then return ai*1/0 else return ai*0/0 end end;return ai*2^(aj-1023)*(al+ak/2^52)end;local function ar(ab,s,e)return aa(ab,s,e-1,1)end;local function as(ab,s,e)return aa(ab,e-1,s,-1)end;local function at(ab,s)return ad(string.byte(ab,s,s+3))end;local function au(ab,s)local ae,af,ag,ah=string.byte(ab,s,s+3)return ad(ah,ag,af,ae)end;local function av(ab,s)return am(string.byte(ab,s,s+7))end;local function aw(ab,s)local ae,af,ag,ah,an,ao,ap,aq=string.byte(ab,s,s+7)return am(aq,ap,ao,an,ah,ag,af,ae)end;local ax={[4]={little=at,big=au},[8]={little=av,big=aw}}local function ay(S)local az=S.index;local aA=string.byte(S.source,az,az)S.index=az+1;return aA end;local function aB(S,aC)local aD=S.index+aC;local aE=string.sub(S.source,S.index,aD-1)S.index=aD;return aE end;local function aF(S)local aC=S:s_szt()local aE;if aC~=0 then aE=string.sub(aB(S,aC),1,-2)end;return aE end;local function aG(aC,aH)return function(S)local aD=S.index+aC;local aI=aH(S.source,S.index,aD)S.index=aD;return aI end end;local function aJ(aC,aH)return function(S)local aK=aH(S.source,S.index)S.index=S.index+aC;return aK end end;local function aL(S)local aM=S:s_int()local aN={}for i=1,aM do local aO=S:s_ins()local aP=bit.band(aO,0x3F)local aQ=a8[aP]local aR=a9[aP]local aS={value=aO,op=a7[aP],A=bit.band(bit.rshift(aO,6),0xFF)}if aQ=='ABC'then aS.B=bit.band(bit.rshift(aO,23),0x1FF)aS.C=bit.band(bit.rshift(aO,14),0x1FF)aS.is_KB=aR.b=='OpArgK'and aS.B>0xFF;aS.is_KC=aR.c=='OpArgK'and aS.C>0xFF elseif aQ=='ABx'then aS.Bx=bit.band(bit.rshift(aO,14),0x3FFFF)aS.is_K=aR.b=='OpArgK'elseif aQ=='AsBx'then aS.sBx=bit.band(bit.rshift(aO,14),0x3FFFF)-131071 end;aN[i]=aS end;return aN end;local function aT(S)local aM=S:s_int()local aU={}for i=1,aM do local aV=ay(S)local k;if aV==1 then k=ay(S)~=0 elseif aV==3 then k=S:s_num()elseif aV==4 then k=aF(S)end;aU[i]=k end;return aU end;local function aW(S,ab)local aM=S:s_int()local aX={}for i=1,aM do aX[i]=a5(S,ab)end;return aX end;local function aY(S)local aM=S:s_int()local aZ={}for i=1,aM do aZ[i]=S:s_int()end;return aZ end;local function a_(S)local aM=S:s_int()local b0={}for i=1,aM do b0[i]={varname=aF(S),startpc=S:s_int(),endpc=S:s_int()}end;return b0 end;local function b1(S)local aM=S:s_int()local b2={}for i=1,aM do b2[i]=aF(S)end;return b2 end;function a5(S,b3)local b4={}local ab=aF(S)or b3;b4.source=ab;S:s_int()S:s_int()b4.numupvals=ay(S)b4.numparams=ay(S)ay(S)ay(S)b4.code=aL(S)b4.const=aT(S)b4.subs=aW(S,ab)b4.lines=aY(S)a_(S)b1(S)for _,v in ipairs(b4.code)do if v.is_K then v.const=b4.const[v.Bx+1]else if v.is_KB then v.const_B=b4.const[v.B-0xFF]end;if v.is_KC then v.const_C=b4.const[v.C-0xFF]end end end;return b4 end;function a3(ab)local b5;local b6;local b7;local b8;local b9;local ba;local bb;local bc={index=1,source=ab}assert(aB(bc,4)=='\27Lua','invalid Lua signature')assert(ay(bc)==0x51,'invalid Lua version')assert(ay(bc)==0,'invalid Lua format')b6=ay(bc)~=0;b7=ay(bc)b8=ay(bc)b9=ay(bc)ba=ay(bc)bb=ay(bc)~=0;b5=b6 and ar or as;bc.s_int=aG(b7,b5)bc.s_szt=aG(b8,b5)bc.s_ins=aG(b9,b5)if bb then bc.s_num=aG(ba,b5)elseif ax[ba]then bc.s_num=aJ(ba,ax[ba][b6 and'little'or'big'])else error('unsupported float size')end;return a5(bc,'@virtual')end;local function bd(be,bf)for i,bg in pairs(be)do if bg.index>=bf then bg.value=bg.store[bg.index]bg.store=bg;bg.index='value'be[i]=nil end end end;local function bh(be,bf,bi)local bj=be[bf]if not bj then bj={index=bf,store=bi}be[bf]=bj end;return bj end;local function bk(...)return select('#',...),{...}end;local function bl(bm,bn)local ab=bm.source;local bo=bm.lines[bm.pc-1]local b3,bp,bq=string.match(bn,'^(.-):(%d+):%s+(.+)')local br='%s:%i: [%s:%i] %s'bo=bo or'0'b3=b3 or'?'bp=bp or'0'bq=bq or bn;error(string.format(br,ab,bo,b3,bp,bq),0)end;local function bs(bm)local aN=bm.code;local bt=bm.subs;local bu=bm.env;local bv=bm.upvals;local bw=bm.varargs;local bx=-1;local by={}local bi=bm.stack;local bz=bm.pc;while true do local bA=aN[bz]local aP=bA.op;bz=bz+1;if aP<18 then if aP<8 then if aP<3 then if aP<1 then for i=bA.A,bA.B do bi[i]=nil end elseif aP>1 then local bg=bv[bA.B]bi[bA.A]=bg.store[bg.index]else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB+bC end elseif aP>3 then if aP<6 then if aP>4 then local A=bA.A;local B=bA.B;local bf;if bA.is_KC then bf=bA.const_C else bf=bi[bA.C]end;bi[A+1]=bi[B]bi[A]=bi[B][bf]else bi[bA.A]=bu[bA.const]end elseif aP>6 then local bf;if bA.is_KC then bf=bA.const_C else bf=bi[bA.C]end;bi[bA.A]=bi[bA.B][bf]else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB-bC end else bi[bA.A]=bi[bA.B]end elseif aP>8 then if aP<13 then if aP<10 then bu[bA.const]=bi[bA.A]elseif aP>10 then if aP<12 then local A=bA.A;local B=bA.B;local C=bA.C;local bD;local bE,bF;if B==0 then bD=bx-A else bD=B-1 end;bE,bF=bk(bi[A](unpack(bi,A+1,A+bD)))if C==0 then bx=A+bE-1 else bE=C-1 end;for i=1,bE do bi[A+i-1]=bF[i]end else local bg=bv[bA.B]bg.store[bg.index]=bi[bA.A]end else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB*bC end elseif aP>13 then if aP<16 then if aP>14 then local A=bA.A;local B=bA.B;local bD;if B==0 then bD=bx-A else bD=B-1 end;bd(by,0)return bk(bi[A](unpack(bi,A+1,A+bD)))else local bf,bG;if bA.is_KB then bf=bA.const_B else bf=bi[bA.B]end;if bA.is_KC then bG=bA.const_C else bG=bi[bA.C]end;bi[bA.A][bf]=bG end elseif aP>16 then bi[bA.A]={}else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB/bC end else bi[bA.A]=bA.const end else local A=bA.A;local bH=bi[A+2]local bf=bi[A]+bH;local bI=bi[A+1]local bJ;if bH==math.abs(bH)then bJ=bf<=bI else bJ=bf>=bI end;if bJ then bi[bA.A]=bf;bi[bA.A+3]=bf;bz=bz+bA.sBx end end elseif aP>18 then if aP<28 then if aP<23 then if aP<20 then bi[bA.A]=#bi[bA.B]elseif aP>20 then if aP<22 then local A=bA.A;local B=bA.B;local bK={}local aM;if B==0 then aM=bx-A+1 else aM=B-1 end;for i=1,aM do bK[i]=bi[A+i-1]end;bd(by,0)return aM,bK else local aE=bi[bA.B]for i=bA.B+1,bA.C do aE=aE..bi[i]end;bi[bA.A]=aE end else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB%bC end elseif aP>23 then if aP<26 then if aP>24 then bd(by,bA.A)else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;if bB==bC==(bA.A~=0)then bz=bz+aN[bz].sBx end;bz=bz+1 end elseif aP>26 then local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;if bB<bC==(bA.A~=0)then bz=bz+aN[bz].sBx end;bz=bz+1 else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB^bC end else bi[bA.A]=bA.B~=0;if bA.C~=0 then bz=bz+1 end end elseif aP>28 then if aP<33 then if aP<30 then local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;if bB<=bC==(bA.A~=0)then bz=bz+aN[bz].sBx end;bz=bz+1 elseif aP>30 then if aP<32 then local aX=bt[bA.Bx+1]local bL=aX.numupvals;local bM;if bL~=0 then bM={}for i=1,bL do local bN=aN[bz+i-1]if bN.op==a7[0]then bM[i-1]=bh(by,bN.B,bi)elseif bN.op==a7[4]then bM[i-1]=bv[bN.B]end end;bz=bz+bL end;bi[bA.A]=a4(aX,bu,bM)else local A=bA.A;local B=bA.B;if not bi[B]==(bA.C~=0)then bz=bz+1 else bi[A]=bi[B]end end else bi[bA.A]=-bi[bA.B]end elseif aP>33 then if aP<36 then if aP>34 then local A=bA.A;local aM=bA.B;if aM==0 then aM=bw.size;bx=A+aM-1 end;for i=1,aM do bi[A+i-1]=bw.list[i]end else local A=bA.A;local bO,bI,bH;bO=assert(tonumber(bi[A]),'`for` initial value must be a number')bI=assert(tonumber(bi[A+1]),'`for` limit must be a number')bH=assert(tonumber(bi[A+2]),'`for` step must be a number')bi[A]=bO-bH;bi[A+1]=bI;bi[A+2]=bH;bz=bz+bA.sBx end elseif aP>36 then local A=bA.A;local C=bA.C;local aM=bA.B;local bP=bi[A]local bQ;if aM==0 then aM=bx-A end;if C==0 then C=bA[bz].value;bz=bz+1 end;bQ=(C-1)*a6;for i=1,aM do bP[i+bQ]=bi[A+i]end else bi[bA.A]=not bi[bA.B]end else if not bi[bA.A]==(bA.C~=0)then bz=bz+1 end end else local A=bA.A;local aH=bi[A]local bR=bi[A+1]local bf=bi[A+2]local bS=A+3;local bK;bi[bS+2]=bf;bi[bS+1]=bR;bi[bS]=aH;bK={aH(bR,bf)}for i=1,bA.C do bi[bS+i-1]=bK[i]end;if bi[bS]~=nil then bi[A+2]=bi[bS]else bz=bz+1 end end else bz=bz+bA.sBx end;bm.pc=bz end end;function a4(bR,bu,b2)local bT=bR.code;local bU=bR.subs;local bV=bR.lines;local bW=bR.source;local bX=bR.numparams;local function bY(...)local bi={}local bZ={}local b_=0;local c0,c1=bk(...)local bm;local c2,bn,bK;for i=1,bX do bi[i-1]=c1[i]end;if bX<c0 then b_=c0-bX;for i=1,b_ do bZ[i]=c1[bX+i]end end;bm={varargs={list=bZ,size=b_},code=bT,subs=bU,lines=bV,source=bW,env=bu,upvals=b2,stack=bi,pc=1}c2,bn,bK=pcall(bs,bm,...)if c2 then return unpack(bK,1,bn)else bl(bm,bn)end;return end;return bY end;return function(c3,bu)return a4(a3(c3),bu or fev(0))end end)();local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIllIll='\101\108\73\57\77\88\78\110\76\49\115\108\85\81\61\61';local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlIIIl="\109\89\71\113\67\83\80\55\78\81\105\87\89\66\90\56\116\72\65\56\89\102\100\51\74\71\113\79\85\51\57\111\82\70\49\103\43\88\88\54\103\107\54\49\65\80\97\83\110\77\73\115\103\107\97\80\117\107\81\49\88\86\105\77\48\105\101\106\83\50\98\48\112\105\66\68\68\112\74\67\73\84\89\56\49\55\121\98\70\55\70\79\66\102\110\47\65\65\101\84\82\65\112\117\83\84\100\99\69\74\67\70\103\80\109\55\68\84\74\117\116\66\57\65\71\88\51\97\110\47\81\67\106\52\118\74\104\103\79\118\75\43\69\51\83\73\122\98\122\103\100\78\112\105\119\48\74\82\53\102\97\101\57\69\104\82\104\105\107\49\65\77\121\121\69\99\102\115\105\83\85\78\88\80\120\66\115\50\53\75\105\79\120\99\90\70\116\107\90\81\73\71\68\81\111\52\83\76\68\51\66\122\111\54\111\50\114\55\88\70\120\75\108\104\98\50\109\101\65\88\74\50\88\110\106\53\69\89\80\102\97\50\65\53\120\106\110\81\47\101\120\54\48\48\73\99\81\80\86\85\65\102\88\97\69\106\81\85\84\67\47\87\43\104\79\80\56\73\80\112\120\83\82\43\103\113\84\114\114\80\50\101\50\70\90\52\83\81\72\78\111\113\71\47\80\111\110\119\51\70\110\73\121\70\48\70\98\108\122\119\119\97\120\86\54\104\51\101\88\70\74\69\76\103\89\100\79\82\89\118\53\48\69\89\57\68\81\100\99\120\75\113\70\76\73\79\106\50\102\102\102\107\67\110\78\89\105\113\103\110\55\106\79\97\118\87\102\104\57\55\97\107\55\53\49\74\86\57\120\74\86\88\74\78\110\56\75\83\98\101\119\122\120\105\69\68\119\50\75\53\48\72\70\108\117\104\118\121\74\65\100\99\104\111\99\110\106\107\112\85\90\69\101\43\105\119\54\65\106\107\104\65\78\102\106\89\52\69\80\90\111\115\98\103\70\111\90\109\77\50\51\118\107\56\121\119\106\68\72\97\101\118\56\110\104\89\103\50\101\98\118\66\84\54\104\47\118\51\112\112\86\115\108\68\73\82\75\113\79\85\107\82\78\47\55\98\90\71\69\121\67\89\47\121\119\69\78\110\99\104\86\101\117\110\43\97\88\81\107\106\55\98\121\66\84\116\120\70\69\85\53\120\74\113\118\121\111\52\51\116\110\114\56\120\74\121\84\109\117\78\85\52\72\75\102\122\48\110\89\101\112\89\119\120\83\53\75\112\48\51\80\75\122\122\90\116\85\119\88\117\117\106\79\98\110\115\47\71\116\50\113\104\109\86\111\53\55\109\82\52\101\106\50\50\108\48\111\114\106\85\70\53\105\73\119\67\85\67\101\73\65\74\108\87\105\107\80\114\99\109\104\51\107\72\109\121\103\121\97\69\104\88\115\82\83\90\110\77\106\122\82\77\87\81\76\56\120\102\116\118\97\85\87\55\80\109\84\87\81\90\90\52\53\51\52\122\74\72\83\54\115\87\89\69\50\55\86\98\78\77\119\109\72\84\110\51\88\48\117\122\122\73\51\72\76\68\72\74\104\108\76\67\113\86\89\72\53\110\80\89\57\75\118\105\47\119\111\87\47\117\113\86\105\114\81\90\97\69\70\53\110\121\73\121\101\116\87\80\101\50\71\83\53\83\83\103\75\43\43\122\75\106\85\43\102\86\89\83\47\65\101\49\56\66\81\120\56\83\104\71\108\49\56\102\69\115\72\107\89\54\76\50\118\84\118\56\73\104\53\65\53\98\65\107\108\110\98\66\84\116\100\48\90\86\70\55\54\67\80\119\89\118\110\79\86\117\116\50\111\67\108\108\75\100\112\121\103\56\111\101\103\70\75\110\105\100\89\100\111\78\80\98\102\106\90\52\117\87\77\120\100\69\110\84\54\90\97\122\49\74\101\90\101\53\90\47\85\108\110\98\69\120\70\76\97\74\85\116\75\120\100\116\78\50\105\88\52\78\112\116\121\49\115\47\54\110\115\83\52\110\48\51\43\75\117\83\77\102\90\109\75\99\97\98\113\74\78\121\69\120\75\89\85\48\85\101\80\53\89\43\83\106\104\76\99\78\51\56\79\110\77\110\107\68\80\111\103\48\108\83\117\100\48\52\84\115\119\48\119\83\98\48\86\67\71\70\118\104\79\99\76\48\66\72\56\86\85\99\65\81\50\54\121\54\47\43\88\47\56\83\52\71\67\106\77\54\111\57\71\47\54\74\51\90\114\85\88\119\103\102\69\116\52\55\82\105\65\88\115\66\119\53\102\113\100\88\100\101\52\67\74\47\121\86\50\86\113\65\107\85\52\53\48\87\50\84\109\76\88\113\57\86\43\67\107\53\113\74\112\104\99\118\54\116\104\118\99\88\50\49\105\100\87\79\75\107\109\71\112\89\88\52\114\86\74\78\110\65\121\121\107\48\80\104\106\55\69\120\107\72\111\110\56\48\90\74\122\66\79\43\82\56\48\97\72\47\78\108\105\74\88\111\54\110\112\74\119\104\77\101\87\72\114\73\88\72\71\51\85\121\75\74\108\86\102\43\55\90\82\70\107\52\85\82\86\43\115\52\115\85\51\113\113\90\108\115\43\117\107\121\87\74\47\74\86\76\78\107\111\81\103\112\54\81\113\90\119\52\53\107\56\116\76\74\69\57\116\56\97\120\122\99\68\121\81\55\115\80\117\81\85\56\105\43\109\73\120\111\88\52\90\101\104\120\99\86\68\69\117\67\107\120\106\84\106\66\111\88\100\118\107\97\119\78\76\106\55\99\102\104\80\98\108\68\122\70\68\82\73\66\82\66\71\75\85\53\89\87\87\103\65\121\68\117\121\102\49\50\98\112\119\111\108\75\109\76\74\121\48\57\90\52\118\49\67\53\98\120\72\119\99\76\115\106\48\116\99\67\90\118\103\50\120\98\75\80\85\81\71\67\80\113\108\90\65\47\66\100\47\53\75\97\99\115\110\113\88\115\110\112\110\111\72\90\55\51\69\85\68\101\43\103\110\69\121\100\82\55\81\104\75\105\54\47\52\106\80\109\56\97\51\82\100\90\86\108\71\110\56\51\86\120\72\67\69\107\70\107\86\114\121\67\109\68\103\77\68\43\117\84\112\106\98\97\114\68\65\48\43\77\88\73\105\107\87\121\120\85\72\113\68\75\48\84\114\67\110\80\54\77\115\74\103\51\78\112\52\54\51\86\47\71\115\56\108\110\51\80\120\49\100\102\106\97\102\107\110\76\89\76\54\118\122\90\82\116\81\49\116\47\80\66\88\101\57\68\72\81\76\48\117\65\53\82\67\53\49\102\119\73\76\84\111\75\102\107\55\86\55\68\53\50\110\49\114\70\113\117\119\72\112\88\107\57\105\88\54\49\88\111\52\84\98\117\119\67\82\78\116\85\103\90\103\119\119\47\84\77\83\43\52\105\49\56\51\86\113\76\54\114\80\103\112\72\106\99\65\85\109\53\75\113\68\80\101\87\54\69\68\122\84\111\51\79\99\57\81\101\106\110\43\104\99\113\112\79\69\54\48\79\79\80\102\82\97\118\97\117\82\90\50\118\71\76\75\49\113\111\103\78\52\117\111\105\66\53\114\43\51\43\106\78\87\68\109\47\97\55\102\80\106\106\65\97\50\57\109\71\107\65\80\116\97\83\98\82\99\82\120\90\89\84\71\55\43\114\116\118\72\113\112\55\78\119\70\74\104\117\55\102\71\83\86\85\104\113\57\118\121\73\72\103\73\111\84\78\74\82\107\43\75\56\102\116\56\76\86\53\122\71\65\121\72\106\68\55\81\83\89\97\110\98\119\120\79\66\111\122\49\98\56\80\122\80\81\48\72\86\110\85\87\88\78\101\51\107\82\71\70\122\112\76\97\103\73\65\102\54\112\52\68\48\57\69\65\77\55\54\110\116\90\68\54\100\112\87\78\111\115\99\69\71\117\50\121\108\50\113\74\115\51\100\116\120\106\88\100\54\69\43\116\80\97\84\107\51\47\65\115\98\109\110\54\89\115\80\115\89\117\55\86\108\77\116\98\86\84\50\72\120\69\68\86\52\111\75\85\69\82\85\65\106\84\51\88\83\85\48\110\89\121\76\53\107\90\116\106\76\121\47\117\56\53\74\120\49\108\72\53\86\114\121\104\65\49\52\105\75\104\49\57\49\115\71\110\118\113\83\90\102\83\82\86\74\122\115\69\105\43\116\109\73\80\86\90\116\103\83\86\77\47\85\66\47\87\65\43\76\73\88\108\105\107\85\68\88\117\118\53\107\74\113\111\76\85\74\77\48\98\43\100\98\87\75\47\110\107\116\76\117\68\119\73\56\105\87\57\49\70\106\66\120\88\111\83\51\85\121\73\103\77\103\51\103\117\77\119\122\113\68\82\107\110\86\110\97\70\69\109\87\121\77\56\74\86\82\47\111\48\114\103\76\108\71\97\112\66\102\54\115\116\100\79\55\53\50\114\116\78\119\83\103\102\85\83\80\71\72\109\113\76\99\53\77\85\99\80\90\80\119\48\99\53\54\114\108\103\72\68\49\108\43\65\121\68\103\55\115\121\72\69\69\120\118\49\98\108\68\66\81\113\121\74\102\108\114\52\73\112\104\112\90\107\102\74\118\48\74\49\78\109\105\76\68\104\53\120\87\87\116\86\113\118\53\98\48\49\87\48\118\70\69\74\68\112\106\85\90\53\72\84\90\56\71\54\99\110\122\54\81\116\73\118\47\78\55\56\115\67\101\69\110\119\83\103\54\73\114\98\110\108\116\67\57\98\43\113\98\112\109\55\84\100\122\114\109\102\80\79\67\119\107\115\120\52\68\107\79\84\48\90\117\67\121\111\68\98\107\107\47\107\70\77\89\53\104\84\71\48\117\85\82\112\111\69\67\98\70\67\71\70\86\78\57\112\65\79\97\71\115\53\55\66\101\70\101\80\109\99\51\65\83\53\102\115\100\56\43\104\121\87\110\54\50\119\101\67\74\106\100\65\56\80\99\90\120\55\100\54\43\100\118\117\53\66\82\111\70\100\102\101\121\73\114\73\84\106\47\81\97\69\90\109\86\106\71\121\66\76\70\122\76\103\75\53\83\47\66\122\55\89\103\111\118\50\115\52\56\83\77\55\117\78\72\99\121\120\77\67\117\104\105\76\83\51\65\47\107\85\113\67\104\117\52\86\69\72\121\98\65\54\114\99\51\73\47\122\57\117\118\71\121\75\80\101\81\85\77\80\69\81\66\74\85\99\109\88\122\116\68\119\117\85\101\83\99\50\117\85\98\119\69\90\88\78\109\77\83\83\68\105\89\121\78\115\70\55\84\110\116\48\73\88\74\90\66\52\119\110\75\120\102\48\98\73\72\77\117\98\116\88\116\99\112\111\86\105\100\109\108\103\116\117\90\117\103\50\104\51\112\111\72\84\111\89\98\73\86\87\56\108\104\65\65\53\107\53\115\90\115\115\79\83\114\120\79\98\49\69\110\79\115\117\101\121\121\113\73\99\90\108\57\120\53\112\107\120\108\55\74\108\50\79\47\105\68\86\75\85\70\111\49\121\49\99\71\54\73\83\112\86\72\87\116\103\70\72\53\43\104\86\88\109\87\84\97\75\53\67\75\67\84\80\71\84\75\116\105\72\75\72\113\50\65\53\115\108\122\43\99\114\111\105\76\65\79\113\75\97\89\86\66\48\86\72\81\74\52\49\97\109\102\85\65\122\69\114\88\80\115\102\90\87\119\70\84\55\77\68\109\122\48\50\47\97\113\56\101\48\110\74\120\48\66\118\84\43\68\89\103\53\67\102\121\81\75\101\104\104\97\71\54\78\72\122\47\78\112\48\66\85\121\89\68\112\57\108\56\106\102\66\117\79\67\54\74\111\81\47\47\89\43\70\119\105\78\107\71\78\116\78\121\77\71\83\110\104\120\113\56\52\106\83\50\81\114\68\103\114\105\101\86\103\86\105\120\116\75\72\122\49\105\48\65\100\69\109\97\120\104\72\111\85\75\106\47\76\69\78\87\70\52\86\85\77\118\113\69\113\50\47\66\86\87\119\105\122\113\75\84\84\89\104\109\49\78\76\56\74\70\90\107\102\47\97\120\98\107\82\102\86\88\102\107\49\75\56\120\47\89\108\119\49\100\83\54\106\98\73\112\84\79\55\83\98\52\117\118\76\97\65\57\98\121\66\76\68\118\55\119\43\119\82\56\89\81\47\53\115\118\83\106\68\89\108\104\51\79\68\51\73\71\118\67\120\53\82\121\97\85\86\56\49\80\84\81\52\56\81\108\110\102\119\120\77\121\56\48\74\115\118\107\76\71\98\110\50\53\74\76\78\121\69\107\66\71\50\118\68\51\100\48\68\82\99\106\75\110\113\65\84\69\111\86\106\108\80\82\119\84\100\89\53\102\115\119\102\90\75\43\66\100\67\70\88\118\81\79\103\108\83\117\119\111\88\82\84\115\115\121\89\80\43\102\103\105\105\57\65\121\122\97\105\103\56\53\86\82\52\109\74\77\103\114\72\121\114\52\107\101\74\47\106\69\98\70\65\81\121\113\78\70\79\106\87\67\43\99\102\106\75\49\98\88\82\51\73\47\70\87\118\121\120\86\107\106\70\43\66\79\75\57\103\111\73\75\121\68\84\112\49\110\87\81\51\57\68\47\116\112\80\78\117\67\116\83\110\71\113\122\87\79\56\53\85\69\88\56\54\104\111\122\99\115\115\54\115\55\99\87\85\72\103\73\78\73\122\67\106\73\110\108\66\55\52\67\113\85\56\73\73\113\65\84\87\103\75\116\43\119\112\111\119\116\87\77\74\84\89\109\120\82\49\90\72\50\50\79\109\105\98\117\104\112\99\105\101\99\50\54\71\81\49\106\116\77\84\75\122\104\115\52\106\69\67\80\56\75\48\81\83\71\55\99\87\49\87\51\105\80\87\75\66\116\80\115\89\81\43\80\110\117\48\116\74\83\114\71\119\114\89\47\122\77\43\79\55\71\88\106\89\111\50\66\47\108\82\109\100\90\74\106\112\77\106\54\118\102\79\65\109\69\57\97\114\80\76\119\113\78\57\115\65\102\78\77\78\70\105\100\65\51\106\105\69\79\73\49\118\89\73\79\77\83\108\51\113\79\53\89\68\107\66\106\104\106\47\67\122\43\108\112\114\86\90\76\72\47\48\66\101\103\86\47\57\65\107\106\77\75\57\97\52\81\98\105\100\47\47\116\72\43\104\52\87\109\121\97\73\69\83\101\73\118\68\79\119\89\69\74\118\55\84\70\82\71\99\121\89\57\111\115\97\78\99\109\101\108\108\67\112\108\54\112\54\76\98\122\99\119\112\98\90\75\43\118\84\114\100\105\74\79\100\43\104\121\49\55\86\78\68\88\101\120\97\97\47\121\67\77\65\80\49\81\77\48\113\102\118\100\115\78\54\72\98\100\97\75\110\67\54\109\89\111\57\48\71\55\79\107\99\81\122\110\86\119\75\83\48\49\112\107\113\72\86\52\104\69\53\120\114\51\53\104\49\76\121\55\122\51\121\68\97\122\120\81\87\98\112\67\115\111\74\72\82\81\86\75\117\56\66\109\43\105\53\99\75\65\48\107\107\109\79\68\51\104\50\118\118\107\66\75\89\90\65\98\88\81\47\83\43\101\43\119\102\121\54\115\57\106\115\102\85\104\56\69\75\50\83\77\88\53\99\65\72\118\70\107\86\67\99\113\51\105\110\84\52\72\81\68\72\84\108\80\115\117\48\113\122\47\48\102\112\50\65\116\47\109\115\80\84\106\99\121\83\53\98\118\43\98\100\103\113\47\111\77\98\112\115\97\110\53\80\72\120\82\82\121\120\88\111\55\57\72\111\84\78\85\113\97\86\106\88\54\54\75\55\118\82\52\98\89\100\74\80\80\106\77\103\99\111\97\81\49\73\53\43\119\67\65\47\43\55\51\121\56\50\86\97\55\119\71\72\83\83\108\67\82\110\90\101\74\118\51\75\66\73\115\113\99\111\57\83\65\104\52\79\89\114\114\87\81\101\99\117\54\48\87\103\66\50\70\87\103\68\73\72\67\85\89\101\54\76\108\71\73\80\90\71\90\67\87\53\113\75\112\81\103\83\111\43\74\67\103\54\51\49\109\49\49\98\48\77\85\117\57\86\66\80\72\107\70\87\122\77\47\66\119\122\81\86\53\120\65\118\115\98\118\98\51\48\85\108\74\69\87\65\51\101\108\81\57\114\56\120\79\74\100\119\114\119\90\101\65\76\84\107\118\86\118\97\86\73\108\73\43\77\80\55\50\80\73\115\75\98\104\98\72\81\80\109\48\89\48\65\86\76\77\83\74\86\74\120\74\68\105\115\73\70\68\90\67\81\97\70\51\102\107\101\66\71\51\121\67\97\88\105\117\79\89\56\43\113\97\69\57\86\50\83\70\85\43\117\101\115\89\119\105\118\69\98\57\86\89\78\55\49\107\122\81\111\51\87\57\86\48\54\66\107\106\117\82\110\51\115\90\50\108\54\100\97\75\89\71\101\53\50\77\81\69\111\121\67\56\56\122\102\70\99\101\75\112\97\71\115\115\88\116\81\98\98\119\72\88\100\120\98\73\77\109\100\84\115\87\111\73\90\78\118\79\119\97\75\52\78\48\66\104\70\71\101\43\56\69\97\119\104\43\102\77\105\102\107\111\121\74\101\53\114\68\112\100\66\114\69\54\121\73\53\122\68\103\66\70\47\85\110\100\86\75\51\79\89\84\70\78\105\73\118\122\71\72\116\73\51\56\120\87\83\100\109\84\70\100\110\65\110\52\83\87\114\51\73\110\70\100\100\75\43\82\103\90\122\47\69\102\90\120\78\113\99\51\102\66\121\105\89\116\83\85\79\65\114\86\66\111\113\111\104\66\72\101\76\43\120\55\56\122\65\70\98\68\104\54\66\114\119\72\102\89\71\72\81\81\74\50\72\104\83\120\75\87\102\89\65\79\70\55\90\47\83\50\87\99\97\84\105\99\43\122\73\117\81\112\68\82\117\47\47\118\75\104\78\49\120\52\112\80\67\118\47\108\112\119\90\104\48\117\80\49\115\54\71\98\105\108\87\116\110\108\87\122\108\106\120\116\65\105\113\86\73\73\76\114\79\121\89\70\87\48\122\105\101\79\121\118\57\75\43\73\66\51\104\98\103\73\99\90\109\66\66\68\101\85\85\122\108\84\116\119\97\73\108\71\52\83\98\109\119\122\76\72\104\101\48\69\83\99\43\48\53\53\120\65\71\87\87\102\67\82\79\57\105\68\53\88\50\113\89\73\111\72\43\109\55\69\71\106\50\119\57\69\112\69\107\52\102\106\57\122\89\108\114\50\57\105\73\73\104\49\75\55\102\70\81\112\74\85\76\66\105\110\80\67\55\48\114\79\86\80\74\99\57\76\84\67\117\112\102\110\82\69\103\68\121\109\65\85\75\87\120\70\76\109\53\76\52\109\113\55\56\81\83\120\87\66\113\118\66\78\56\50\90\107\86\120\52\101\119\89\50\104\79\48\97\89\75\81\107\113\54\53\108\85\88\80\53\119\76\105\57\120\111\108\73\85\104\86\120\98\66\49\105\72\52\121\56\67\100\75\72\111\99\82\99\69\90\107\100\115\67\98\73\69\101\67\121\51\100\118\87\120\120\103\56\121\107\74\84\82\73\84\72\76\100\116\52\112\84\74\57\106\97\52\76\52\85\83\66\70\121\97\43\56\47\100\101\116\110\120\78\105\110\118\69\100\98\117\80\112\80\82\85\103\106\68\66\114\77\98\66\114\102\112\118\52\81\55\101\113\48\49\77\66\82\75\47\76\47\85\122\80\84\76\116\76\74\105\89\56\105\54\80\98\105\119\50\84\105\108\77\71\74\119\86\49\52\113\88\67\80\99\56\55\69\56\88\121\78\57\117\65\122\115\108\104\66\78\80\108\50\43\114\81\107\66\88\57\98\54\52\90\75\78\79\83\69\57\69\85\51\67\90\117\106\66\83\81\100\49\106\52\52\104\111\54\69\97\47\103\107\105\81\43\122\66\70\76\122\71\101\72\97\52\82\113\53\122\113\85\81\65\90\103\78\56\104\97\43\51\86\73\54\72\71\49\52\68\52\117\55\117\122\97\106\48\51\79\86\110\49\87\82\87\121\103\73\74\56\85\116\103\101\113\69\49\112\90\49\97\57\54\75\117\76\82\73\79\105\48\71\48\75\109\90\88\55\119\103\65\113\99\89\121\72\68\120\67\85\79\56\85\51\109\107\54\79\80\122\68\80\101\50\98\105\113\86\85\79\89\121\68\121\75\87\48\56\108\83\90\121\57\53\120\112\52\72\53\87\77\106\86\97\100\43\48\121\75\101\107\102\68\98\86\104\101\97\51\74\52\70\90\116\114\54\53\73\117\49\121\109\118\55\69\97\111\55\106\51\80\78\79\74\77\54\53\118\100\81\83\79\65\52\100\97\65\116\79\106\114\100\76\72\74\108\106\56\74\71\78\119\66\55\55\66\75\53\98\74\90\106\50\86\70\43\99\72\72\55\51\67\72\100\83\80\101\107\110\114\51\73\105\82\48\114\110\101\106\56\100\83\105\80\73\54\76\65\102\109\66\116\82\110\102\85\116\70\122\48\75\78\57\54\104\110\98\72\115\118\101\109\88\121\66\85\52\117\117\77\43\52\100\70\75\71\77\73\122\121\115\66\121\121\97\116\78\101\67\74\65\86\51\115\82\65\112\89\77\104\112\51\88\103\107\54\67\87\74\70\51\100\103\113\107\106\83\84\110\105\82\120\78\73\43\101\121\85\77\87\107\88\106\99\100\109\86\103\118\81\104\81\116\82\83\65\77\115\116\79\76\54\117\99\117\49\82\111\79\55\56\55\116\80\81\53\75\71\103\75\97\110\68\72\109\120\72\112\68\105\72\78\122\85\107\66\106\77\77\49\113\47\76\109\100\77\116\73\83\70\43\67\88\90\115\74\86\117\103\43\82\97\71\50\76\43\82\68\102\114\54\83\112\99\122\75\85\90\116\112\56\116\84\113\87\65\50\81\80\57\71\88\54\72\118\52\103\118\102\43\102\81\101\80\49\55\70\87\111\82\90\98\112\47\49\102\85\113\90\112\90\56\56\101\51\102\49\79\70\116\109\65\120\52\108\82\49\90\120\106\65\72\120\81\116\56\99\120\78\66\54\120\109\57\67\119\102\88\101\67\75\109\118\122\74\81\67\71\47\87\85\101\53\114\97\47\99\112\54\53\112\103\122\109\43\107\55\77\105\98\118\102\51\43\83\51\73\52\115\118\108\99\87\120\52\99\73\87\69\120\110\52\50\116\52\85\119\57\109\48\103\100\54\52\98\70\111\98\65\81\57\108\81\89\121\101\84\71\116\111\119\103\51\86\74\121\97\48\117\104\108\52\105\72\69\81\120\104\108\98\67\67\70\54\67\115\77\84\81\72\112\47\78\57\85\83\122\110\56\97\82\77\75\83\97\120\103\68\81\67\102\79\110\113\116\49\120\66\116\102\57\108\69\118\82\71\97\114\86\106\55\115\75\88\75\99\117\97\74\106\48\73\119\103\103\77\52\74\102\87\84\122\112\78\73\108\105\119\120\50\100\110\43\76\50\67\102\103\71\73\99\69\90\104\67\99\57\88\56\114\78\101\77\78\97\50\49\81\86\76\71\55\66\78\77\67\90\87\53\89\85\80\122\71\115\80\77\89\75\57\115\77\51\103\104\55\101\51\55\88\69\89\54\72\79\54\68\83\72\57\77\83\79\90\108\122\78\121\97\74\84\53\53\43\103\106\70\114\66\97\54\47\54\75\76\56\102\54\97\111\85\107\74\75\68\90\106\78\101\89\67\109\116\78\119\115\83\87\84\72\55\73\83\76\43\78\111\73\90\76\103\103\114\116\82\110\68\51\88\89\75\52\112\85\103\122\66\55\100\90\87\108\70\81\86\120\118\90\51\73\52\69\100\89\107\74\78\101\87\50\52\109\110\98\72\50\89\117\57\52\86\48\66\110\55\84\105\75\69\53\102\79\89\122\71\77\75\100\84\87\51\82\86\68\118\104\66\67\57\87\110\84\118\109\102\68\85\116\66\90\78\48\56\56\47\83\102\65\100\75\48\103\85\49\105\97\98\69\72\98\118\79\106\104\75\54\120\100\89\54\120\72\75\51\105\110\75\105\108\121\117\55\47\70\65\111\54\81\70\51\84\122\86\67\57\80\87\88\81\121\112\75\97\72\71\110\47\86\47\74\103\104\78\49\108\74\53\82\116\85\111\120\112\103\89\121\113\90\57\55\76\85\86\85\77\51\47\116\120\121\104\57\53\120\99\118\78\90\66\119\112\105\82\111\69\51\90\48\107\74\98\49\104\89\51\85\97\56\111\57\86\87\68\117\86\43\119\82\51\47\78\98\81\43\69\74\101\79\116\101\103\48\116\48\89\65\55\82\117\112\81\56\61";local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIllIII='cGdGMyktdmIsIzp7eE5xViI=';local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIllIIl='\77\69\79\87\79\87\79\79\87\79\87\87\79\87\79\87\79\87\79\87\79\87';local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlIIlI=function(a,b)local c=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlIlIl(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlIllI(a))local d=c["\99\105\112\104\101\114"](c,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlIllI(b))return aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlIllI(d)end;local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIllIIl='\77\69\79\87\79\87\79\79\87\79\87\87\79\87\79\87\79\87\79\87\79\87';local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIllIll='\101\108\73\57\77\88\78\110\76\49\115\108\85\81\61\61';local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIllIlI='QHZiQkloTlA+cEtBQWl3MDMzUA==';local aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlIIII='Oz8/NGtZYjtDaUkrRkErWloyOyNzUyVycTolSjNqJDQwaE4=bi12PyZmUDh0RiF1';function aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlIlll(a,b)local c=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlIllI(a,b);local d=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIllIlI;return c,d end;return aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlIlII(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlIIlI(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIllIll,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalIIlIIIl),getfenv(0))()end)()
